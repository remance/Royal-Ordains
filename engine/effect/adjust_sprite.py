# from functools import lru_cache
# from bisect import bisect_left

from pygame.transform import rotate

rotation_list = (-180, -120, -90, -45, 0, 45, 90, 120, 180)

# static already calculated closest angle with take_closest
close_rotation_dict = {-360: -180, -359: -180, -358: -180, -357: -180, -356: -180, -355: -180, -354: -180, -353: -180, -352: -180, -351: -180, -350: -180, -349: -180, -348: -180, -347: -180, -346: -180, -345: -180, -344: -180, -343: -180, -342: -180, -341: -180, -340: -180, -339: -180, -338: -180, -337: -180, -336: -180, -335: -180, -334: -180, -333: -180, -332: -180, -331: -180, -330: -180, -329: -180, -328: -180, -327: -180, -326: -180, -325: -180, -324: -180, -323: -180, -322: -180, -321: -180, -320: -180, -319: -180, -318: -180, -317: -180, -316: -180, -315: -180, -314: -180, -313: -180, -312: -180, -311: -180, -310: -180, -309: -180, -308: -180, -307: -180, -306: -180, -305: -180, -304: -180, -303: -180, -302: -180, -301: -180, -300: -180, -299: -180, -298: -180, -297: -180, -296: -180, -295: -180, -294: -180, -293: -180, -292: -180, -291: -180, -290: -180, -289: -180, -288: -180, -287: -180, -286: -180, -285: -180, -284: -180, -283: -180, -282: -180, -281: -180, -280: -180, -279: -180, -278: -180, -277: -180, -276: -180, -275: -180, -274: -180, -273: -180, -272: -180, -271: -180, -270: -180, -269: -180, -268: -180, -267: -180, -266: -180, -265: -180, -264: -180, -263: -180, -262: -180, -261: -180, -260: -180, -259: -180, -258: -180, -257: -180, -256: -180, -255: -180, -254: -180, -253: -180, -252: -180, -251: -180, -250: -180, -249: -180, -248: -180, -247: -180, -246: -180, -245: -180, -244: -180, -243: -180, -242: -180, -241: -180, -240: -180, -239: -180, -238: -180, -237: -180, -236: -180, -235: -180, -234: -180, -233: -180, -232: -180, -231: -180, -230: -180, -229: -180, -228: -180, -227: -180, -226: -180, -225: -180, -224: -180, -223: -180, -222: -180, -221: -180, -220: -180, -219: -180, -218: -180, -217: -180, -216: -180, -215: -180, -214: -180, -213: -180, -212: -180, -211: -180, -210: -180, -209: -180, -208: -180, -207: -180, -206: -180, -205: -180, -204: -180, -203: -180, -202: -180, -201: -180, -200: -180, -199: -180, -198: -180, -197: -180, -196: -180, -195: -180, -194: -180, -193: -180, -192: -180, -191: -180, -190: -180, -189: -180, -188: -180, -187: -180, -186: -180, -185: -180, -184: -180, -183: -180, -182: -180, -181: -180, -180: -180, -179: -180, -178: -180, -177: -180, -176: -180, -175: -180, -174: -180, -173: -180, -172: -180, -171: -180, -170: -180, -169: -180, -168: -180, -167: -180, -166: -180, -165: -180, -164: -180, -163: -180, -162: -180, -161: -180, -160: -180, -159: -180, -158: -180, -157: -180, -156: -180, -155: -180, -154: -180, -153: -180, -152: -180, -151: -180, -150: -180, -149: -120, -148: -120, -147: -120, -146: -120, -145: -120, -144: -120, -143: -120, -142: -120, -141: -120, -140: -120, -139: -120, -138: -120, -137: -120, -136: -120, -135: -120, -134: -120, -133: -120, -132: -120, -131: -120, -130: -120, -129: -120, -128: -120, -127: -120, -126: -120, -125: -120, -124: -120, -123: -120, -122: -120, -121: -120, -120: -120, -119: -120, -118: -120, -117: -120, -116: -120, -115: -120, -114: -120, -113: -120, -112: -120, -111: -120, -110: -120, -109: -120, -108: -120, -107: -120, -106: -120, -105: -120, -104: -90, -103: -90, -102: -90, -101: -90, -100: -90, -99: -90, -98: -90, -97: -90, -96: -90, -95: -90, -94: -90, -93: -90, -92: -90, -91: -90, -90: -90, -89: -90, -88: -90, -87: -90, -86: -90, -85: -90, -84: -90, -83: -90, -82: -90, -81: -90, -80: -90, -79: -90, -78: -90, -77: -90, -76: -90, -75: -90, -74: -90, -73: -90, -72: -90, -71: -90, -70: -90, -69: -90, -68: -90, -67: -45, -66: -45, -65: -45, -64: -45, -63: -45, -62: -45, -61: -45, -60: -45, -59: -45, -58: -45, -57: -45, -56: -45, -55: -45, -54: -45, -53: -45, -52: -45, -51: -45, -50: -45, -49: -45, -48: -45, -47: -45, -46: -45, -45: -45, -44: -45, -43: -45, -42: -45, -41: -45, -40: -45, -39: -45, -38: -45, -37: -45, -36: -45, -35: -45, -34: -45, -33: -45, -32: -45, -31: -45, -30: -45, -29: -45, -28: -45, -27: -45, -26: -45, -25: -45, -24: -45, -23: -45, -22: 0, -21: 0, -20: 0, -19: 0, -18: 0, -17: 0, -16: 0, -15: 0, -14: 0, -13: 0, -12: 0, -11: 0, -10: 0, -9: 0, -8: 0, -7: 0, -6: 0, -5: 0, -4: 0, -3: 0, -2: 0, -1: 0, 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 45, 24: 45, 25: 45, 26: 45, 27: 45, 28: 45, 29: 45, 30: 45, 31: 45, 32: 45, 33: 45, 34: 45, 35: 45, 36: 45, 37: 45, 38: 45, 39: 45, 40: 45, 41: 45, 42: 45, 43: 45, 44: 45, 45: 45, 46: 45, 47: 45, 48: 45, 49: 45, 50: 45, 51: 45, 52: 45, 53: 45, 54: 45, 55: 45, 56: 45, 57: 45, 58: 45, 59: 45, 60: 45, 61: 45, 62: 45, 63: 45, 64: 45, 65: 45, 66: 45, 67: 45, 68: 90, 69: 90, 70: 90, 71: 90, 72: 90, 73: 90, 74: 90, 75: 90, 76: 90, 77: 90, 78: 90, 79: 90, 80: 90, 81: 90, 82: 90, 83: 90, 84: 90, 85: 90, 86: 90, 87: 90, 88: 90, 89: 90, 90: 90, 91: 90, 92: 90, 93: 90, 94: 90, 95: 90, 96: 90, 97: 90, 98: 90, 99: 90, 100: 90, 101: 90, 102: 90, 103: 90, 104: 90, 105: 90, 106: 120, 107: 120, 108: 120, 109: 120, 110: 120, 111: 120, 112: 120, 113: 120, 114: 120, 115: 120, 116: 120, 117: 120, 118: 120, 119: 120, 120: 120, 121: 120, 122: 120, 123: 120, 124: 120, 125: 120, 126: 120, 127: 120, 128: 120, 129: 120, 130: 120, 131: 120, 132: 120, 133: 120, 134: 120, 135: 120, 136: 120, 137: 120, 138: 120, 139: 120, 140: 120, 141: 120, 142: 120, 143: 120, 144: 120, 145: 120, 146: 120, 147: 120, 148: 120, 149: 120, 150: 120, 151: 180, 152: 180, 153: 180, 154: 180, 155: 180, 156: 180, 157: 180, 158: 180, 159: 180, 160: 180, 161: 180, 162: 180, 163: 180, 164: 180, 165: 180, 166: 180, 167: 180, 168: 180, 169: 180, 170: 180, 171: 180, 172: 180, 173: 180, 174: 180, 175: 180, 176: 180, 177: 180, 178: 180, 179: 180, 180: 180, 181: 180, 182: 180, 183: 180, 184: 180, 185: 180, 186: 180, 187: 180, 188: 180, 189: 180, 190: 180, 191: 180, 192: 180, 193: 180, 194: 180, 195: 180, 196: 180, 197: 180, 198: 180, 199: 180, 200: 180, 201: 180, 202: 180, 203: 180, 204: 180, 205: 180, 206: 180, 207: 180, 208: 180, 209: 180, 210: 180, 211: 180, 212: 180, 213: 180, 214: 180, 215: 180, 216: 180, 217: 180, 218: 180, 219: 180, 220: 180, 221: 180, 222: 180, 223: 180, 224: 180, 225: 180, 226: 180, 227: 180, 228: 180, 229: 180, 230: 180, 231: 180, 232: 180, 233: 180, 234: 180, 235: 180, 236: 180, 237: 180, 238: 180, 239: 180, 240: 180, 241: 180, 242: 180, 243: 180, 244: 180, 245: 180, 246: 180, 247: 180, 248: 180, 249: 180, 250: 180, 251: 180, 252: 180, 253: 180, 254: 180, 255: 180, 256: 180, 257: 180, 258: 180, 259: 180, 260: 180, 261: 180, 262: 180, 263: 180, 264: 180, 265: 180, 266: 180, 267: 180, 268: 180, 269: 180, 270: 180, 271: 180, 272: 180, 273: 180, 274: 180, 275: 180, 276: 180, 277: 180, 278: 180, 279: 180, 280: 180, 281: 180, 282: 180, 283: 180, 284: 180, 285: 180, 286: 180, 287: 180, 288: 180, 289: 180, 290: 180, 291: 180, 292: 180, 293: 180, 294: 180, 295: 180, 296: 180, 297: 180, 298: 180, 299: 180, 300: 180, 301: 180, 302: 180, 303: 180, 304: 180, 305: 180, 306: 180, 307: 180, 308: 180, 309: 180, 310: 180, 311: 180, 312: 180, 313: 180, 314: 180, 315: 180, 316: 180, 317: 180, 318: 180, 319: 180, 320: 180, 321: 180, 322: 180, 323: 180, 324: 180, 325: 180, 326: 180, 327: 180, 328: 180, 329: 180, 330: 180, 331: 180, 332: 180, 333: 180, 334: 180, 335: 180, 336: 180, 337: 180, 338: 180, 339: 180, 340: 180, 341: 180, 342: 180, 343: 180, 344: 180, 345: 180, 346: 180, 347: 180, 348: 180, 349: 180, 350: 180, 351: 180, 352: 180, 353: 180, 354: 180, 355: 180, 356: 180, 357: 180, 358: 180, 359: 180, 360: 180}


def adjust_sprite(self):
    true_angle = int(self.angle)
    if self.renew_sprite:
        if true_angle in self.base_image["sprite"]:
            self.image = self.base_image["sprite"][true_angle]
        else:
            self.image = self.base_image["sprite"][0]
            self.image = rotate(self.image, true_angle)
            self.base_image["sprite"][true_angle] = self.image

        self.renew_sprite = False

    self.rect = self.image.get_rect(center=self.pos)


def damage_effect_adjust_sprite(self):
    adjust_sprite(self)
    grid_left = int(self.rect.topleft[0] / self.collision_grid_width)
    if grid_left < 0:
        grid_left = 0
    grid_right = int(self.rect.topright[0] / self.collision_grid_width) + 1
    if grid_right > self.last_grid:
        grid_right = self.last_grid
    grid_range = range(grid_left, grid_right)
    if self.grid_range != grid_range:
        self.grid_range = grid_range

    self.mask = self.base_image["mask"][close_rotation_dict[int(self.angle)]]

#
# @lru_cache(maxsize=360)
# def take_closest(angle):
#     """
#     Assumes rotation_list is sorted. Returns closest value to myNumber.
#
#     If two numbers are equally close, return the smallest number.
#     """
#     pos = bisect_left(rotation_list, angle)
#     if pos == 0:
#         return rotation_list[0]
#     if pos == len(rotation_list):
#         return rotation_list[-1]
#     before = rotation_list[pos - 1]
#     after = rotation_list[pos]
#     if after - angle < angle - before:
#         return after
#     else:
#         return before
